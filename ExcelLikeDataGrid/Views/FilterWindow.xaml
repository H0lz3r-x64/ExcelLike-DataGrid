<Window x:Class="ExcelLikeDataGrid.View.FilterWindow"
        x:Name="Filter_Window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExcelLikeDataGrid.View"
        xmlns:util="clr-namespace:ExcelLikeDataGrid.Utilities"
        xmlns:vm="clr-namespace:ExcelLikeDataGrid.ViewModel"
        d:DataContext="{d:DesignInstance Type={x:Type vm:FilterWindowVM}}"
        mc:Ignorable="d"
        WindowStyle="ThreeDBorderWindow"
        ResizeMode="NoResize"
        Height="310"
        Width="700">

    <Window.Resources>
        <util:BindingProxy x:Key="proxy"
                           Data="{Binding}" />

        <util:FilterModeToEnabledConverter x:Key="FilterModeToEnabledConverter" />
    </Window.Resources>

    <Window.DataContext>
        <vm:FilterWindowVM />
    </Window.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="30" />
        </Grid.RowDefinitions>

        <StackPanel Orientation="Vertical"
                    Margin="10"
                    Grid.Row="0">
            
            <ListView Name="filterListView"
                      ItemsSource="{Binding FilterConditions}"
                      Height="166"
                      d:ItemsSource="{d:SampleData ItemCount=8}"
                      SelectionMode="Extended">

                <ListView.InputBindings>
                    <KeyBinding Key="Delete"
                                Command="{Binding RemoveFilterCommand}"
                                CommandParameter="{Binding ElementName=filterListView}" />
                    <KeyBinding Key="Backspace"
                                Command="{Binding RemoveFilterCommand}"
                                CommandParameter="{Binding ElementName=filterListView}" />

                </ListView.InputBindings>

                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="HorizontalContentAlignment"
                                Value="Stretch" />
                    </Style>

                </ListView.ItemContainerStyle>

                <ListView.View>
                    <GridView AllowsColumnReorder="False">
                        <GridViewColumn x:Name="col1"
                                        Width="100">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox x:Name="cb_Conjunctions"
                                              ItemsSource="{Binding Data.Conjunctions, Source={StaticResource proxy}}"
                                              SelectedItem="{Binding Conjunction}"
                                              IsEnabled="{Binding HasConjunction}" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                            <GridViewColumnHeader Content="Conjunction"
                                                  IsHitTestVisible="False" />
                        </GridViewColumn>

                        <GridViewColumn x:Name="col2"
                                        Width="180">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Data.FilterModes, Source={StaticResource proxy}}"
                                              SelectedItem="{Binding FilterMode}" />

                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                            <GridViewColumnHeader Content="Filter Mode"
                                                  IsHitTestVisible="False" />
                        </GridViewColumn>


                        <GridViewColumn Width="{Binding ActualWidth, ElementName=helperField}">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox Text="{Binding FilterValue}"
                                             HorizontalAlignment="Stretch"
                                             IsEnabled="{Binding FilterMode, Converter={StaticResource FilterModeToEnabledConverter}}" />
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                            <GridViewColumnHeader Content="Filter Value"
                                                  IsHitTestVisible="False" />
                        </GridViewColumn>

                    </GridView>
                </ListView.View>
            </ListView>

            <!--Hack to make ListView.GridViewColumn automatically fill extra space, since Width="*" is not allowed-->
            <!--hidden helper Grid which does resizing -->
            <Grid Visibility="Hidden">
                <Grid.ColumnDefinitions>
                    <!--Width is bound to width of the first GridViewColumn -->
                    <ColumnDefinition Width="{Binding ActualWidth, ElementName=col1}" />
                    <ColumnDefinition Width="{Binding ActualWidth, ElementName=col2}" />
                    <!--Width is set to "Fill"-->
                    <ColumnDefinition Width="*" />
                    <!--Correction Width + 17 from the vertical scrollbar-->
                    <ColumnDefinition Width="27" />
                </Grid.ColumnDefinitions>
                <!--This is the hidden helper Field which is used to bind to, using the "Fill" column of the helper grid-->
                <Grid Grid.Column="2"
                      Name="helperField" />
            </Grid>

            <TextBlock Foreground="Black"
                       FontSize="11"
                       Margin="0,5,0,0">
                <Run Text="Use the 	&quot;?	&quot; as a placeholder for a single character." />
                <LineBreak />
                <Run Text="Use the 	&quot;_&quot; character as a wildcard for any character string." />
            </TextBlock>

        </StackPanel>

        <Grid Grid.Row="1">
            <StackPanel Orientation="Horizontal"
                        Margin="0,0,10,0"
                        Grid.Row="1"
                        HorizontalAlignment="Right">

                <Button x:Name="applyFilterButton"
                        Content="Apply Filter"
                        Width="100"
                        Height="30"
                        Margin="0,0,8,0"
                        Command="{Binding ApplyFilterCommand, Mode=OneWay}"
                        CommandParameter="{Binding ElementName=Filter_Window}" />

                <Button Name="cancelFilterButton"
                        Content="Cancel"
                        Width="100"
                        Height="30"
                        Command="{Binding CancelFilterCommand, Mode=OneWay}"
                        CommandParameter="{Binding ElementName=Filter_Window}" />
            </StackPanel>

            <StackPanel Orientation="Horizontal"
                        Margin="10,0,0,0"
                        Grid.Row="1"
                        HorizontalAlignment="Left">

                <Button Name="addFilterButton"
                        Content="Add Filter"
                        Width="100"
                        Height="30"
                        Command="{Binding AddFilterCommand, Mode=OneWay}" />

                <Button Name="removeFilterButton"
                        Content="Remove Filter"
                        Margin="8,0,0,0"
                        Width="100"
                        Height="30"
                        Command="{Binding RemoveFilterCommand, Mode=OneWay}"
                        CommandParameter="{Binding ElementName=filterListView}" />
            </StackPanel>
        </Grid>
    </Grid>
</Window>
